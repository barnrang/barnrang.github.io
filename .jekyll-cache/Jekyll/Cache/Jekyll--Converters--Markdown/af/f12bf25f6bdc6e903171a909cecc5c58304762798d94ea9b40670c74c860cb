I"S@<p><em>คำเตือน: บทความต่อไปนี้มีจุดมุ่งหมายเพื่อการใช้ GPU ในงานหลากหลายประเภทเพื่อให้เข้าใจถีงหลักการทำงานมากขึ้น ไม่ใช่บทความเพื่อเขียนเกมเป็นหลัก</em></p>

<p><em>บทความนี้ไม่ได้มีไว้เพื่อสอนพื้นฐาน เหมาะสำหรับผู้อ่านที่มีประสบการณ์ในการใช้ ภาษา C หรือเข้าใจพื้นฐานการเขียนโปรแกรม</em></p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">//โปรแกรมบวกเลขใน GPU</span>
<span class="cp">#include &lt;stdio.h&gt;
#include &lt;cuda_runtime.h&gt;
#include &lt;helper_cuda.h&gt;
</span>
<span class="n">__global__</span> <span class="kt">void</span> <span class="nf">add_kernel</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">h_c</span><span class="p">,</span> <span class="o">*</span><span class="n">d_c</span><span class="p">;</span> <span class="c1">// h - host (CPU), d - device (GPU)</span>

    <span class="c1">//แบ่งพื้นที่บน GPU</span>
    <span class="n">checkCudaErrors</span><span class="p">(</span><span class="n">cudaMalloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">d_c</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)));</span>

    <span class="c1">//เรียก kernel(แก่น) ไปทำงานบน GPU</span>
    <span class="n">add_kernel</span><span class="o">&lt;&lt;&lt;</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">d_c</span><span class="p">);</span>

    <span class="c1">//รอ GPU ประมวลผลเสร็จ &amp; ตรวจข้อผิดพลาด</span>
    <span class="n">cudaDeviceSynchronize</span><span class="p">();</span> <span class="n">checkCudaErrors</span><span class="p">(</span><span class="n">cudaGetLastError</span><span class="p">());</span>

    <span class="c1">//คัดลอกข้อมูลจาก GPU → CPU</span>
    <span class="n">checkCudaErrors</span><span class="p">(</span><span class="n">cudaMemcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h_c</span><span class="p">,</span> <span class="n">d_c</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="n">cudaMemcpyDeviceToHost</span><span class="p">));</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"1 + 1 = %d </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">h_c</span><span class="p">);</span>

    <span class="c1">//ปลดแอกพื้นที่</span>
    <span class="n">checkCudaErrors</span><span class="p">(</span><span class="n">cudaFree</span><span class="p">(</span><span class="n">d_c</span><span class="p">));</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>เซฟไว้ในไฟล์ add.cu แล้ว compile&amp;run ด้วย</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvcc -I/usr/local/cuda/samples/common/inc/ add.cu -o add
./add

==Result==
1 + 1 = 2
&gt;&gt;&gt;
</code></pre></div></div>

<p>รวมๆ ก็ไม่มีความต่างกับภาษา C แต่กลับเต็มไปด้วยคำสั่งที่ไม่คุ้นหน้า (ยกเว้นเคยเล่นกับ openCL มาก่อน) เรามาไล่เรียงกันไปเรื่อยๆเพื่อเสริมความเข้าใจ</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">__global__</code></li>
</ul>

<p>ก่อนอื่น สำหรับการทำ GPU Programming โปรแกรมสามารถรันได้ทั้งบน CPU และ GPU หรือเขาจะเรียกว่า Host และ Device ตามลำดับ การประดับฟังก์ชั่นด้วย <code class="language-plaintext highlighter-rouge">__global__</code> จะทำให้ compiler nvcc รับรู้ว่าให้รันฟังก์ชั่นบน Device</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="c1">// GPU - Device</span>
<span class="n">__global__</span> <span class="kt">void</span> <span class="nf">add_kernel</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// CPU - Host</span>
<span class="kt">void</span> <span class="nf">add_kernel</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cudaMalloc(&amp;&lt;target&gt;, &lt;size&gt;)</code></li>
</ul>

<p>ทำงานเหมือน <code class="language-plaintext highlighter-rouge">malloc</code> ในภาษา C แต่เป็นการแบ่งพื้นที่บน GPU ซึ่งต้องถูกแก้ไขบน GPU เท่านั้น อยากให้สังเกตว่าตัวแปรจะถูกนำด้วย <code class="language-plaintext highlighter-rouge">h_</code> หรือ <code class="language-plaintext highlighter-rouge">d_</code> ซึ่งหากพูดง่ายๆคือ host กับ device ตามลำดับ</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">kernel&lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;(args)</code></li>
</ul>

<p>เราจะเรียกฟังก์ชั่นที่เราจะรันว่า kernel(แก่น) ตรงนี้ก็คือคำสั่งเรียกการทำงานของ GPU อย่างแท้จริง <code class="language-plaintext highlighter-rouge">gridSize</code> กับ <code class="language-plaintext highlighter-rouge">blockSize</code> อาจดูเป็นตัวแปรปริศนา แต่ในที่นี้จะทิ้งไว้เป็น <code class="language-plaintext highlighter-rouge">&lt;&lt;&lt;1,1&gt;&gt;&gt;</code> ก่อน (HINT: ในโปรแกรมนี้เรารันบน thread เส้นเดียว)</p>

<p>ข้อสังเกต: เนื่องจากเราไม่สามารถส่งค่ากลับไปโดยตรงที่ Host ได้ เราจึงต้องส่ง pointer ของตัวแปรที่ <strong>อยู่บน Device</strong> เพื่ออัพเดทค่า ฟังก์ชั่นเลยเป็น <code class="language-plaintext highlighter-rouge">void</code></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cudaMemcpy(&amp;&lt;target&gt;, &amp;&lt;source&gt;, &lt;size&gt;, &lt;direction&gt;)</code></li>
</ul>

<p>การทิ้งค่าไว้บน Device นั้นไม่มีประโยชน์หากเราไม่ดึงค่าของมันกลับมาที่ Host <code class="language-plaintext highlighter-rouge">cudaMemcpy</code> คือฟังก์ชันที่คัดลอกข้อมูลไปมาได้ เพียงแค่ส่ง pointers ของเป้าหมายกับแหล่งที่มาและทิศทางก็เพียงพอ</p>

<p>ในที่นี้ <code class="language-plaintext highlighter-rouge">cudaMemcpyDeviceToHost</code> เป็นตัวแปรที่มีไว้อยู่แล้ว ความหมายก็ตรงตัวคือคัดลอกจาก Device ไปยัง Host</p>

<h1 id="-แบบทดสอบมินิ">-แบบทดสอบมินิ</h1>

<p>Q1. หากจะคัดลอกจาก Host → Device จะต้องใช้ตัวแปรชื่ออะไร
<button onclick="hide(0)">Show/Hide</button></p>
<div id="dotted-box">
<div class="hidebox">
A. เดาได้ไม่ยาก cudaMemcpyHostToDevice
</div>
</div>

<p>Q2. จงเติมโค้ดที่เหมาะสมลงไปใน <code class="language-plaintext highlighter-rouge">&lt;size&gt;</code> กับ <code class="language-plaintext highlighter-rouge">&lt;direction&gt;</code></p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">__global__</span> <span class="kt">void</span> <span class="nf">do_something</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">d_a</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">d_b</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...(</span><span class="k">do</span> <span class="n">something</span><span class="p">)...</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="k">const</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">h_a</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="o">*</span><span class="n">d_a</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">h_b</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="o">*</span><span class="n">d_b</span><span class="p">;</span>
    <span class="p">...</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="n">h_a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">checkCudaErrors</span><span class="p">(</span><span class="n">cudaMalloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">d_a</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">size</span><span class="o">&gt;</span><span class="p">));</span>
    <span class="n">checkCudaErrors</span><span class="p">(</span><span class="n">cudaMalloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">d_b</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">size</span><span class="o">&gt;</span><span class="p">));</span>
    <span class="n">checkCudaErrors</span><span class="p">(</span><span class="n">cudaMemcpy</span><span class="p">(</span><span class="n">d_a</span><span class="p">,</span> <span class="n">h_a</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">size</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">direction</span><span class="o">&gt;</span><span class="p">));</span>
    <span class="n">do_something</span><span class="o">&lt;&lt;&lt;</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">d_a</span><span class="p">,</span> <span class="n">d_b</span><span class="p">);</span>
    <span class="p">...</span>
<span class="p">}</span></code></pre></figure>

<p><button onclick="hide(1)">Show/Hide</button></p>
<div id="dotted-box">
<div class="hidebox">
A. size - sizeof(int) * N, direction - cudaMemcpyHostToDevice
</div>
</div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cudaFree(&amp;&lt;target&gt;)</code></li>
</ul>

<p>อันนี้คือปลดแอกคำสั่งก่อนหน้านี้ <code class="language-plaintext highlighter-rouge">cudaMalloc</code> หากลืมอาจทำให้ Memory ถูกใช้มากเกินไป (เพราะไม่ได้เคลียร์ออก)</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">checkCudaErrors()</code></li>
</ul>

<p>เช็คอาการว่ามีข้อผิดพลาดเกิดขึ้นหรือไม่</p>

<p>หมายเหตุ: ตัวไฟล์ header จะอยู่ในโฟลเดอร์ของ “CUDA sample”</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cudaDeviceSynchronize()</code></li>
</ul>

<p>เนื่องจากเราส่งงานไปให้ Device เรียบร้อย Host ก็พร้อมที่จะทำตามคำสั่งต่อไปหรืออีกนัยนึงคือ Asynchronus เพื่อรอการทำงานของ Device ให้เสร็จสมบูรณ์ การเรียก <code class="language-plaintext highlighter-rouge">cudaDeviceSynchronize()</code> มีความจำเป็นอย่างยิ่ง</p>

<h1 id="จบบท">จบบท</h1>
<p>เห็นว่าหลักการพื้นฐานของการเขียนโปรแกรมบน GPU ไม่ได้ยากเย็นขนาดนั้น จะคล้ายการตีปิงปองไปมาระหว่าง CPU &amp; GPU อย่างไรก็ดี เห็นได้ชัดว่านี้คือโปรแกรมที่ไร้ประโยชน์เพราะไม่ได้ใช้ประโยชน์จาก GPU แม้แต่น้อย สำหรับตัวอย่างถัดไปเราจะทำสิ่งที่มีประโยชน์กว่าคือการ บวกเวกเตอร์ใดๆ</p>
:ET